' Declare the Sleep function to pause execution for a given number of milliseconds.
Private Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Private Sub Application_Startup()
    ' Declare Outlook objects and other variables
    Dim olNs As Outlook.NameSpace
    Dim Inbox As Outlook.MAPIFolder
    Dim Items As Outlook.Items
    Dim Filter As String
    
    ' Declare variables for HTTP request and responses
    Dim req As New MSXML2.ServerXMLHTTP60
    Dim Body As String
    Dim myUrl As String
    Dim Resp As String
    Dim Tmp As String
    Dim ProcId As String
    Dim Auth As String
    Dim param1 As String, param2 As String, param3 As String

    ' Get the Outlook namespace and default Inbox folder
    Set olNs = Application.GetNamespace("MAPI")
    Set Inbox = olNs.GetDefaultFolder(olFolderInbox)
    
    ' Set a filter to only select unread emails in the inbox
    Filter = "@SQL=" & Chr(34) & "urn:schemas:httpmail:read" & Chr(34) & "=0"
    
    ' Step 1: Get the authorization token for UiPath API using the refresh token.
    ' Create the body for the POST request to get the OAuth token.
    Body = "{""grant_type"": ""refresh_token"",""client_id"": ""YOUR CLIENT ID"",""refresh_token"": ""YOUR REFRESH TOKEN""}"
    
    ' Specify the URL for the OAuth token request
    myUrl = "https://account.uipath.com/oauth/token"
    
    ' Open a POST request to the OAuth endpoint
    req.Open "POST", myUrl, False
    req.SetRequestHeader "Content-Type", "application/json"
    req.SetRequestHeader "X-UIPATH-TenantName", "YOUR TENANT NAME"
    
    ' Send the request to obtain the authorization token
    req.Send Body
    Resp = req.ResponseText
    
    ' Extract the access token from the response and set it for later use
    Auth = "Bearer " + Mid(Resp, InStr(Resp, "access_token") + 15, InStr(Resp, "id_token") - 21)

    ' Retrieve unread emails from the inbox using the filter
    Set Items = Inbox.Items.Restrict(Filter)

    ' Loop through each unread email in the inbox
    For Each item In Items
        ' Extract relevant information from the email
        param1 = item.Subject
        param2 = item.SenderEmailAddress
        param3 = item.Body

        ' Step 2: Start the UiPath process (job)
        ' Define the URL and body for the POST request to start a UiPath job
        myUrl = "https://platform.uipath.com/[Account Logical Name]/[Tenant Logical Name]/odata/Jobs/UiPath.Server.Configuration.OData.StartJobs"
        Body = "{""startInfo"":{""ReleaseKey"": ""YOUR PROCESS ReleaseKey from GET CMD"",""Strategy"": ""All"",""InputArguments"": ""{\""in_par1\"":\""" + param1 + "\"",\""in_par2\"":\""" + param2 + "\"",\""in_par3\"":\""" + param3 + "\""}""}}"
        
        ' Open the POST request to start the job
        req.Open "POST", myUrl, False
        req.SetRequestHeader "Content-Type", "application/json"
        req.SetRequestHeader "X-UIPATH-TenantName", "YOUR TENANT NAME"
        req.SetRequestHeader "X-UIPATH-OrganizationUnitId", "YOUR UnitId from GET CMD"
        req.SetRequestHeader "Authorization", Auth
        
        ' Send the request to start the process/job
        req.Send Body
        Resp = req.ResponseText
        
        ' Extract the process ID from the response to track the job
        Tmp = Right(Resp, Len(Resp) - InStrRev(Resp, "Id") - 3)
        ProcId = Left(Tmp, Len(Tmp) - 3)

        ' Step 3: Check the status of the process (job) repeatedly until it is done
        ' Define the URL to check the status of the job
        myUrl = "https://platform.uipath.com/[Account Logical Name]/[Tenant Logical Name]/odata/Jobs?$filter=Id eq " + ProcId

        ' Initialize a counter for the loop (maximum of 12 checks)
        Dim i As Integer
        i = 1
        
        ' Loop to check the job status until it is successful or the max iterations are reached
        Do While i < 12
            ' Wait for 5 seconds before checking again
            Sleep 5000

            ' Send a GET request to check the status of the job
            req.Open "GET", myUrl, False
            req.SetRequestHeader "Content-Type", "application/json"
            req.SetRequestHeader "X-UIPATH-TenantName", "YOUR TENANT NAME"
            req.SetRequestHeader "Authorization", Auth
            req.Send Body
            Resp = req.ResponseText

            ' Extract the state of the job from the response
            Tmp = Mid(Resp, InStr(Resp, "State") + 8, InStr(Resp, "JobPriority") - InStr(Resp, "State") - 11)
            Tmp = LCase(Tmp) ' Convert to lowercase for easier comparison

            ' If the job is successful, exit the loop
            If (Tmp = "successful") Then
                Exit Do
            End If
            i = i + 1 ' Increment the counter for the next iteration
        Loop

        ' No email reply section here anymore
        ' If you want to log or store the results, you can do it here (optional)
    Next item ' Move to the next email if available
End Sub